Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:

QUERY:

/*
Nesting all SELECT-FROM Clause to produce a table of data 
that shows all the number of records in each table.
*/

SELECT
        (SELECT count(*) 
        FROM Attribute) AS Attribute_Rec_Num,

        (SELECT count(*) 
        FROM Business) AS Business_Rec_Num,

        (SELECT count(*) 
        FROM Category) AS Category_Rec_Num,

        (SELECT count(*) 
        FROM Checkin) AS Checkin_Rec_Num,

        (SELECT count(*) 
        FROM elite_years) AS Elite_Years_Rec_Num,

        (SELECT count(*) 
        FROM friend) AS friend_Rec_Num,

        (SELECT count(*) 
        FROM hours) AS hours_Rec_Num,

        (SELECT count(*) 
        FROM photo) AS photo_Rec_Num,

        (SELECT count(*) 
        FROM review) AS review_Rec_Num,

        (SELECT count(*) 
        FROM tip) AS tip_Rec_Num,

        (SELECT count(*) 
        FROM user) AS user_Rec_Num

OUTPUT:

+-------------------+------------------+------------------+-----------------+---------------------+----------------+---------------+---------------+
| Attribute_Rec_Num | Business_Rec_Num | Category_Rec_Num | Checkin_Rec_Num | Elite_Years_Rec_Num | friend_Rec_Num | hours_Rec_Num | photo_Rec_Num | 
+-------------------+------------------+------------------+-----------------+---------------------+----------------+---------------+---------------+
|             10000 |            10000 |            10000 |           10000 |               10000 |          10000 |         10000 |         10000 |
+-------------------+------------------+------------------+-----------------+---------------------+----------------+---------------+---------------+

+-------------------+------------------+-----+
|review_Rec_Num | tip_Rec_Num | user_Rec_Num |
+---------------+-------------+--------------+
|         10000 |       10000 |      10000   |
+---------------+-------------+--------------+


i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table =  10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

QUERY:

/*
Nesting all SELECT-FROM Clause to produce a table 
of data that shows all the DISTINCT pkey or fkey in each table.

pkey (primary key)
fkey (foreign key)
*/

SELECT
    (SELECT COUNT(DISTINCT id)
    FROM Business) AS 'businesstbl_pkey',

    (SELECT COUNT(DISTINCT business_id)
    FROM hours) AS 'hourstbl_fkey',

    (SELECT COUNT(DISTINCT business_id)
    FROM category) AS 'categorytbl_fkey',

    (SELECT COUNT(DISTINCT business_id)
    FROM Attribute) AS 'Attributetbl_fkey',

    (SELECT COUNT(DISTINCT id)
    FROM review) AS 'Reviewtbl_pkey',

    (SELECT COUNT(DISTINCT business_id)
    FROM Checkin) AS 'Checkintbl_fkey',

    (SELECT COUNT(DISTINCT id)
    FROM Photo) AS 'Phototbl_pkey',

    (SELECT COUNT(DISTINCT user_id)
    FROM Tip) AS 'Tiptbl_fkey (user_id)',

    (SELECT COUNT(DISTINCT id)
    FROM User) AS 'Usertbl_pkey',

    (SELECT COUNT(DISTINCT user_id)
    FROM Friend) AS 'Friendtbl_pkey',

    (SELECT COUNT(DISTINCT user_id)
    FROM Elite_years) AS 'Eliteyearstbl_pkey'


OUTPUT:

+------------------+---------------+------------------+-------------------+----------------+-----------------+---------------+-----------------------+
| businesstbl_pkey | hourstbl_fkey | categorytbl_fkey | Attributetbl_fkey | Reviewtbl_pkey | Checkintbl_fkey | Phototbl_pkey | Tiptbl_fkey (user_id) |
+------------------+---------------+------------------+-------------------+----------------+-----------------+---------------+-----------------------+
|            10000 |          1562 |             2643 |              1115 |          10000 |             493 |         10000 |                   537 |
+------------------+---------------+------------------+-------------------+----------------+-----------------+---------------+-----------------------+

+--------------+----------------+--------------------+
| Usertbl_pkey | Friendtbl_pkey | Eliteyearstbl_pkey |
+--------------+----------------+--------------------+
|        10000 |             11 |               2780 |
+--------------+----------------+--------------------+


i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = 10000
vi. Checkin = 493
vii. Photo = 10000
viii. Tip (user_id) = 537
ix. User = 10000
x. Friend = 11
xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:
	
QUERY:

SELECT COUNT(*) AS Null_check
FROM User
WHERE id is NULL OR
		name is NULL OR
		review_count IS NULL OR
		yelping_since IS NULL OR
		useful IS NULL OR 
  funny IS NULL OR 
		cool IS NULL OR 
		Fans IS NULL OR 
		average_stars IS NULL OR 
		compliment_hot IS NULL OR 
		compliment_more IS NULL OR 
		compliment_profile IS NULL OR 
		compliment_cute IS NULL OR 
		compliment_list IS NULL OR 
		compliment_note IS NULL OR 
		compliment_plain IS NULL OR 
		compliment_cool IS NULL OR 
		compliment_funny IS NULL OR 
		compliment_writer IS NULL OR 
		compliment_photos IS NULL

OUTPUT:
+----------+
| COUNT(*) |
+----------+
|        0 |
+----------+

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars

QUERY:
SELECT
    MIN(Stars) as 'Min:',
    MAx(Stars) as 'Max:',
    AVG(Stars) as 'Avg:'
FROM Review

OUTPUT:
+------+------+--------+
| Min: | Max: |   Avg: |
+------+------+--------+
|    1 |    5 | 3.7082 |
+------+------+--------+
	
		min:1		max:5		avg:3.7082
		
	
	ii. Table: Business, Column: Stars

QUERY:
SELECT
    MIN(Stars) as 'Min:',
    MAx(Stars) as 'Max:',
    AVG(Stars) as 'Avg:'
FROM Business

OUTPUT:
+------+------+--------+
| Min: | Max: |   Avg: |
+------+------+--------+
|  1.0 |  5.0 | 3.6549 |
+------+------+--------+

		min:1		max:5		avg:3.6549
		
	
	iii. Table: Tip, Column: Likes

QUERY:	
SELECT
    MIN(Likes) as 'Min:',
    MAx(Likes) as 'Max:',
    AVG(Likes) as 'Avg:'
FROM Tip

OUTPUT:
+------+------+--------+
| Min: | Max: |   Avg: |
+------+------+--------+
|    0 |    2 | 0.0144 |
+------+------+--------+

		min:0		max:2		avg:0.0144
		
	
	iv. Table: Checkin, Column: Count

QUERY:
SELECT
    MIN(Count) as 'Min:',
    MAx(Count) as 'Max:',
    AVG(Count) as 'Avg:'
FROM Checkin

OUTPUT:
+------+------+--------+
| Min: | Max: |   Avg: |
+------+------+--------+
|    1 |   53 | 1.9414 |
+------+------+--------+

		min:1		max:53		avg:1.9414
		
	
	v. Table: User, Column: Review_count
	
QUERY:
SELECT
    MIN(Review_count) as 'Min:',
    MAx(Review_count) as 'Max:',
    AVG(Review_count) as 'Avg:'
FROM User

	OUTPUT:
	+------+------+---------+
| Min: | Max: |    Avg: |
+------+------+---------+
|    0 | 2000 | 24.2995 |
+------+------+---------+

		min:0		max:2000		avg:24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

SELECT
    city,
    SUM(review_count) AS Count_of_Reviews
FROM Business
GROUP BY city
ORDER BY Count_of_Reviews DESC
	
	Copy and Paste the Result Below:

+-----------------+------------------+
| city            | Count_of_Reviews |
+-----------------+------------------+
| Las Vegas       |            82854 |
| Phoenix         |            34503 |
| Toronto         |            24113 |
| Scottsdale      |            20614 |
| Charlotte       |            12523 |
| Henderson       |            10871 |
| Tempe           |            10504 |
| Pittsburgh      |             9798 |
| Montr√©al        |             9448 |
| Chandler        |             8112 |
| Mesa            |             6875 |
| Gilbert         |             6380 |
| Cleveland       |             5593 |
| Madison         |             5265 |
| Glendale        |             4406 |
| Mississauga     |             3814 |
| Edinburgh       |             2792 |
| Peoria          |             2624 |
| North Las Vegas |             2438 |
| Markham         |             2352 |
| Champaign       |             2029 |
| Stuttgart       |             1849 |
| Surprise        |             1520 |
| Lakewood        |             1465 |
| Goodyear        |             1155 |
+-----------------+------------------+
	
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT
    stars AS Star_Rating,
    COUNT(stars) AS Count
FROM Business
WHERE city = 'Avon'
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns ‚Äì star rating and count):

+-------------+-------+
| Star_Rating | Count |
+-------------+-------+
|         1.5 |     1 |
|         2.5 |     2 |
|         3.5 |     3 |
|         4.0 |     2 |
|         4.5 |     1 |
|         5.0 |     1 |
+-------------+-------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT
    stars AS Star_Rating,
    COUNT(stars) AS Count
FROM Business
WHERE city = 'Beachwood'
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns ‚Äì star rating and count):
		
+-------------+-------+
| Star_Rating | Count |
+-------------+-------+
|         2.0 |     1 |
|         2.5 |     1 |
|         3.0 |     2 |
|         3.5 |     2 |
|         4.0 |     1 |
|         4.5 |     2 |
|         5.0 |     5 |
+-------------+-------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
SELECT
    name AS Users_name,
    SUM(review_count) AS Total_reviews
FROM User
GROUP BY name
ORDER BY Total_reviews DESC
LIMIT 3

	Copy and Paste the Result Below:

+------------+---------------+
| Users_name | Total_reviews |
+------------+---------------+
| Nicole     |          2397 |
| Sara       |          2253 |
| Gerald     |          2034 |
+------------+---------------+


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:

SELECT
    AVG((review_count - Avg_x) * (fans - Avg_y)) * AVG((review_count - Avg_x) * (fans - Avg_y))/ (Var_x * Var_y) as r
FROM User, (SELECT
                Avg_x,
                Avg_y,
                AVG((review_count - Avg_x)*(review_count - Avg_x)) as Var_x,
                AVG((fans - Avg_y)*(fans - Avg_y)) as Var_y
            FROM User, (SELECT
                            AVG(review_count) as Avg_x,
                            AVG(fans) as Avg_y
                        FROM User))

ANS: Based on the pearson correlation coefficient formula, posing more reviews does correlate with more fans. As posing review increased, the fans also increases

Pearson correlation (r):

r ( 0 to 1) positive correlation
r ( 0 )						 No correlation
r ( 0 to -1 ) Negative correlation

+----------------+
|             r  |
+----------------+
| 0.437136492915 |
+----------------+
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: There are more reviews with the word 'love' than 'hate'.

OUTPUT:
1. LOVE
+-------------------+----------+
| SUM(review_count) | txt_love |
+-------------------+----------+
|            241345 |     None |
|              2054 |      yes |
+-------------------+----------+
2. HATE
+-------------------+----------+
| SUM(review_count) | txt_hate |
+-------------------+----------+
|            243337 |     None |
|                62 |      yes |
+-------------------+----------+

SANITY CHECK:
3. TOTAL (output 1 and 2 should have this total number if you add the "None + yes")
+-------------------+
| SUM(review_count) |
+-------------------+
|            243399 |
+-------------------+

SQL code used to arrive at answer:

-- 1. finding total review count for text with word 'love'
SELECT
    SUM(review_count),
    CASE
        WHEN text LIKE '%Love%' THEN  'yes'
    END AS txt_love
FROM user AS u
    LEFT JOIN review AS r
    ON u.id = r.user_id
GROUP BY txt_love

-- 2. finding total review count for text with word 'hate'
SELECT
    SUM(review_count),
    CASE
        WHEN text LIKE '%Hate%' THEN  'yes'
    END AS txt_hate
FROM user AS u
    LEFT JOIN review AS r
    ON u.id = r.user_id
GROUP BY txt_hate

-- 3. to check the total number of review_count
SELECT
    SUM(review_count)
FROM user AS u
    LEFT JOIN review AS r
    ON u.id = r.user_id 


10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
SELECT
    name AS User_name,
    SUM(fans) AS Total_num_fans
FROM user
GROUP BY name
ORDER BY Total_num_fans DESC
lIMIT 10
	
	Copy and Paste the Result Below:

+-----------+----------------+
| User_name | Total_num_fans |
+-----------+----------------+
| Amy       |            519 |
| Mimi      |            498 |
| Harald    |            311 |
| Gerald    |            256 |
| Lisa      |            207 |
| Nicole    |            200 |
| Christine |            187 |
| Mark      |            156 |
| Jen       |            148 |
| Linda     |            148 |
+-----------+----------------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

QUERY:

SELECT
    b.city,
    b.name AS Business_Name,
    AVG(b.stars) AS Avg_rating,
    h.hours,
    SUM(review_count),
    c.category
FROM business AS b
    INNER JOIN hours AS h ON b.id = h.business_id
    INNER JOIN category as c ON b.id = h.business_id											-- join and link the category table and hours table via business table
WHERE b.city = 'Las Vegas' AND c.category LIKE 'Hotels & Travel'
GROUp By Business_Name
ORDER BY Avg_rating

OUTPUT:
+-----------+--------------------------------+------------+----------------------+-------------------+-----------------+
| city      | Business_Name                  | Avg_rating | hours                | SUM(review_count) | category        |
+-----------+--------------------------------+------------+----------------------+-------------------+-----------------+
| Las Vegas | Walgreens                      |        2.5 | Saturday|8:00-22:00  |              3612 | Hotels & Travel |
| Las Vegas | Wingstop                       |        3.0 | Saturday|11:00-0:00  |             74046 | Hotels & Travel |
| Las Vegas | Hi Scores - Blue Diamond       |        3.5 | Saturday|0:00-0:00   |             63210 | Hotels & Travel |
| Las Vegas | Wooly Wonders                  |        3.5 | Saturday|10:00-16:00 |              5676 | Hotels & Travel |
| Las Vegas | Anthem Pediatrics              |        4.0 | Saturday|8:00-12:00  |              8256 | Hotels & Travel |
| Las Vegas | Big Wong Restaurant            |        4.0 | Saturday|10:00-23:00 |            462336 | Hotels & Travel |
| Las Vegas | Children's Dental Center       |        4.0 | Monday|7:30-17:00    |              3784 | Hotels & Travel |
| Las Vegas | Jacques Cafe                   |        4.0 | Saturday|11:00-20:00 |            101136 | Hotels & Travel |
| Las Vegas | Sweet Ruby Jane Confections    |        4.0 | Saturday|10:00-19:00 |             15480 | Hotels & Travel |
| Las Vegas | Vue at Centennial              |        4.0 | Saturday|9:00-17:00  |              3612 | Hotels & Travel |
| Las Vegas | Red Rock Canyon Visitor Center |        4.5 | Saturday|8:00-16:30  |             19264 | Hotels & Travel |
| Las Vegas | Desert Medical Equipment       |        5.0 | Monday|8:00-17:00    |              1720 | Hotels & Travel |
| Las Vegas | Motors & More                  |        5.0 | Saturday|8:00-12:00  |              3612 | Hotels & Travel |
+-----------+--------------------------------+------------+----------------------+-------------------+-----------------+
	
i. Do the two groups you chose to analyze have a different distribution of hours?

ANS: Yes, theres a different time distribution of hours from groups with 2-3 Star Rating compared with 4-5 Star Rating as shown in the table above even though it was on the same day.


ii. Do the two groups you chose to analyze have a different number of reviews?

ANS: Yes, theres a different number of reviews for group 2-3 Ratings vs 4-5 Ratings as shown in the table row SUM(review_count).

         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

ANS: Yes, 3 location address on "Tropicana Ave" belongs to lower star rating (2-3 Stars) and 2 location address on "Village Center Cir" belongs to high star rating (4-5 Stars). 

OUTPUT:
+-----------+----------------------------------+--------------------------------+------------+----------------------+-------------------+-----------------+
| city      | address                          | Business_Name                  | Avg_rating | hours                | SUM(review_count) | category        |
+-----------+----------------------------------+--------------------------------+------------+----------------------+-------------------+-----------------+
| Las Vegas | 3808 E Tropicana Ave             | Walgreens                      |        2.5 | Saturday|8:00-22:00  |              3612 | Hotels & Travel |
| Las Vegas | 5045 W Tropicana Ave             | Wingstop                       |        3.0 | Saturday|11:00-0:00  |             74046 | Hotels & Travel |
| Las Vegas | 4785 Blue Diamond Rd             | Hi Scores - Blue Diamond       |        3.5 | Saturday|0:00-0:00   |             63210 | Hotels & Travel |
| Las Vegas | 3421 E Tropicana Ave, Ste I      | Wooly Wonders                  |        3.5 | Saturday|10:00-16:00 |              5676 | Hotels & Travel |
| Las Vegas | 6070 S Rainbow Blvd, Ste 10      | Anthem Pediatrics              |        4.0 | Saturday|8:00-12:00  |              8256 | Hotels & Travel |
| Las Vegas | 5040 Spring Mountain Rd          | Big Wong Restaurant            |        4.0 | Saturday|10:00-23:00 |            462336 | Hotels & Travel |
| Las Vegas | 2085 Village Center Cir, Ste 120 | Children's Dental Center       |        4.0 | Monday|7:30-17:00    |              3784 | Hotels & Travel |
| Las Vegas | 1910 Village Center Cir, Unit 1  | Jacques Cafe                   |        4.0 | Saturday|11:00-20:00 |            101136 | Hotels & Travel |
| Las Vegas | 8975 S Eastern Ave, Ste 3-B      | Sweet Ruby Jane Confections    |        4.0 | Saturday|10:00-19:00 |             15480 | Hotels & Travel |
| Las Vegas | 7350 W Centennial Pkwy           | Vue at Centennial              |        4.0 | Saturday|9:00-17:00  |              3612 | Hotels & Travel |
| Las Vegas | 1000 Scenic Loop Dr              | Red Rock Canyon Visitor Center |        4.5 | Saturday|8:00-16:30  |             19264 | Hotels & Travel |
| Las Vegas | 3555 W Reno Ave, Ste F           | Desert Medical Equipment       |        5.0 | Monday|8:00-17:00    |              1720 | Hotels & Travel |
| Las Vegas | 2315 Highland Dr                 | Motors & More                  |        5.0 | Saturday|8:00-12:00  |              3612 | Hotels & Travel |
+-----------+----------------------------------+--------------------------------+------------+----------------------+-------------------+-----------------+

SQL code used for analysis:

SELECT
    b.city,
    b.address,
    b.name AS Business_Name,
    AVG(b.stars) AS Avg_rating,
    h.hours,
    SUM(review_count),
    c.category
FROM business AS b
    INNER JOIN hours AS h ON b.id = h.business_id
    INNER JOIN category as c ON b.id = h.business_id           -- join and link the category table and hours table via business table
WHERE b.city = 'Las Vegas' AND c.category LIKE 'Hotels & Travel'
GROUp By Business_Name
ORDER BY Avg_rating

		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.

+---------------------+---------------+-------------+----------------+
| close (0), open (1) |     Avg_stars | Avg_reviews | Useful_reviews |
+---------------------+---------------+-------------+----------------+
|                   0 | 3.54225352113 |       130.0 |             69 |
|                   1 |  3.7610619469 |       311.0 |            484 |
+---------------------+---------------+-------------+----------------+
		
i. Difference 1:

ANS: There is a slight difference on Average of stars thus closed vs open recieved, with the open one's received slightly higher star than closed business.
         
ii. Difference 2:

ANS: There is also a significant diffirence between the Average number of reviews received by closed and open business in which the open ones received the most reviews. The users also voted these reviews to be useful.    
         
         
SQL code used for analysis:

SELECT
    is_open AS 'close (0), open (1)',
    AVG(b.stars) AS Avg_stars,
    Round(AVG(review_count)) AS Avg_reviews,
    SUM(useful) AS Useful_reviews
FROM business AS b
    INNER JOIN review ON review.business_id = b.id
--WHERE is_open = '0'
GROUP BY is_open
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:

ANS: Clustering businesses to find commonalities or anomalies
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

ANS:
In this analysis we need to get the business name, address, stars, category to what it is belong to, status of business (open/closed), attributes of the business and reviews. With these, we need to connect the following table; business, category, attribute and review.  These tables will help us to see the shape and structure of each business. 
                           
                  
iii. Output of your finished dataset:

NOTE: Limiting the view to 3 rows for easy viewing.
+----------------------------------------+------------------+---------------+---------+-----------+---------+-------------+
| name                                   | address          | business_star | is_open | category  | name    | review_star |
+----------------------------------------+------------------+---------------+---------+-----------+---------+-------------+
| Bootleggers Modern American Smokehouse | 3375 E Shea Blvd |           4.0 |       1 | Nightlife | Alcohol |           4 |
| Bootleggers Modern American Smokehouse | 3375 E Shea Blvd |           4.0 |       1 | Nightlife | Alcohol |           5 |
| Bootleggers Modern American Smokehouse | 3375 E Shea Blvd |           4.0 |       1 | Nightlife | Alcohol |           5 |
+----------------------------------------+------------------+---------------+---------+-----------+---------+-------------+ 

NOTE: I also use SUBSTR(reviews) on this part as it was a paragraph. This is only to view easily
+----------------------------------------------------+
| reviews                                            |
+----------------------------------------------------+
| My husband and I decided to come here for a Saturd |
| This place is awesome! The service was great and q |
| This restaurant has the absolute best atmosphere.  |
+----------------------------------------------------+      
         
iv. Provide the SQL code you used to create your final dataset:

SELECT
    b.name,
    b.address,
    b.stars AS business_star,
    b.is_open,
    c.category,
    a.name,
    r.stars AS review_star,
    r.text AS reviews
FROM business AS b 
    INNER JOIN category AS c ON c.business_id = b.id
    INNER JOIN attribute AS a ON a.business_id = b.id
    INNER JOIN review AS r ON r.business_id = b.id
LIMIT 3
